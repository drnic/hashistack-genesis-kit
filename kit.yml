---
name: hashistack
author: Justin Carter <justin@starkandwayne.com>
github: https://github.com/genesis-community/hashistack-genesis-kit
homepage: https://github.com/genesis-community/hashistack-genesis-kit

subkits:
- prompt: Do you want to use subkit 'vault'?
  subkit: vault
- prompt: Do you want to use subkit 'nomad'?
  subkit: nomad

params:
  base:
  - description: The datacenter that this deployment is being deployed to
    ask: What is the datacenter
    param: datacenter
  - description: The encryption key is used to encrypt the gossip between nodes and generated via 'consul keygen'
    ask: What is the consul encryption key?
    vault: consul/encrypt:key
  - description: The name of the BOSH network to deploy to
    param: hashistack_network
  - description: The name of the BOSH disk pool to give Consul servers
    param: consul_disk_pool
  - description: The name of the BOSH VM type for the Consul servers
    param: consul_vm_type

  vault:
  - description: The name of the BOSH VM type for Vault to use
    param: vault_vm_type
  - description: |
      For zero-downtime updates provide a token with the policy
      path "sys/step-down" {
        capabilities = ["update", "sudo"]
      }
      This will allow BOSH to demote the leader node before updating
    param: vault_step_down_token
  - description: |
      For zero-downtime updates individual nodes must be unsealed after updating.
      By providing the unseal keys this will be taken care of automatically.
      It is highly advised to rekey Vault after each update so that the unseal keys
      don't remain exposed in the manifest
    param: vault_unseal_keys
    type: list

  nomad:
  - description: The region that this deployment is being deployed to
    ask: What is the region
    param: region
  - description: The encryption key is used to encrypt the gossip between nodes and generated via 'nomad keygen'
    ask: What is the nomad encryption key?
    vault: nomad/encrypt:key

credentials:
  base: {}
  vault: {}

certificates:
  base:
    consul/certs:
      ca: { valid_for: 10y }
      servers:
        valid_for: 10y
        names:
        - consul_peer
        - 127.0.0.1
      agent:
        valid_for: 10y
        names:
        - consul_agent
        - 127.0.0.1
      vault:
        valid_for: 10y
        names:
        - vault.service.consul
        - 127.0.0.1
      nomad:
        valid_for: 10y
        names:
        - nomad.service.consul
        - 127.0.0.1

  nomad:
    consul/certs:
      ca: { valid_for: 10y }
      servers:
        valid_for: 10y
        names:
        - nomad_server
        - 127.0.0.1
      client:
        valid_for: 10y
        names:
        - nomad_client
        - 127.0.0.1

